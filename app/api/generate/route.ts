import { NextRequest, NextResponse } from 'next/server';
import { zFormState } from '../../../domain/validate';
import { pickClauses } from '../../../domain/clauses';
import { buildPromptPack } from '../../../lib/prompts';
import { callModel } from '../../../lib/models';
import { generateDeterministic } from '../../../lib/deterministic';
import { mdToHtml } from '../../../lib/markdown';

export const runtime = 'edge';
export const dynamic = 'force-dynamic';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const parsed = zFormState.safeParse(body);
    if (!parsed.success) {
      return NextResponse.json(
        { error: 'Invalid payload', issues: parsed.error.issues },
        { status: 400 }
      );
    }

    const state = parsed.data;
    const clauses = pickClauses(state);
    const prompt = buildPromptPack(state, clauses);

    let tos_markdown: string;
    let privacy_markdown: string;
    let notes = '';

    try {
      const llm = await callModel(prompt, 'json');
      if (llm?.tos_markdown && llm?.privacy_markdown) {
        tos_markdown = String(llm.tos_markdown);
        privacy_markdown = String(llm.privacy_markdown);
        notes = String(llm.notes ?? 'Generated by model');
      } else {
        throw new Error('Malformed model response');
      }
    } catch {
      const det = generateDeterministic(state, clauses);
      tos_markdown = det.tos_markdown;
      privacy_markdown = det.privacy_markdown;
      notes = det.notes ?? 'Deterministic fallback used';
    }

    const tos_html = mdToHtml(tos_markdown);
    const privacy_html = mdToHtml(privacy_markdown);

    return NextResponse.json({
      tos_markdown,
      privacy_markdown,
      tos_html,
      privacy_html,
      notes,
    });
  } catch (err) {
    console.error('Generation error:', err);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
